files:
  /opt/custom_config/etc-nginx-conf.d-webapp_healthd.conf.erb:
    content: |
      # file evalauted using ERB during deploy
      # all environment variables are available

      client_max_body_size 500M;
      server_names_hash_bucket_size 128;

      upstream backend {
        server unix:///var/run/puma/my_app.sock;
      }
      log_format healthd '$msec"$uri"'
                      '$status"$request_time"$upstream_response_time"'
                      '$http_x_forwarded_for';


      server {
        listen 90 proxy_protocol;

        server_name getaudiofromvideo.com *.getaudiofromvideo.com;

        set_real_ip_from 10.0.0.0/8;
        real_ip_header proxy_protocol;

        location / {
          return 301 https://$host$request_uri;
        }
      }

      server {
        listen 80 proxy_protocol;

        server_name *.getaudiofromvideo.com;

        set_real_ip_from 10.0.0.0/8;
        real_ip_header proxy_protocol;

        location / {
          return 301 https://<%= Rails.application.credentials[Rails.env.to_sym][:HTTP_HOST] %>$request_uri;
        }
      }

      server {
        listen 80 proxy_protocol default_server;

        server_name <%= Rails.application.credentials[Rails.env.to_sym][:HTTP_HOST] %>;

        set_real_ip_from 10.0.0.0/8;
        real_ip_header proxy_protocol;

        if ($time_iso8601 ~ "^(\d{4})-(\d{2})-(\d{2})T(\d{2})") {
          set $year $1;
          set $month $2;
          set $day $3;
          set $hour $4;
        }

        access_log  /var/log/nginx/access.log  main;
        access_log /var/log/nginx/healthd/application.log.$year-$month-$day-$hour healthd;
        error_log /var/log/nginx/error.log;

        large_client_header_buffers 8 32k;

        location /health {
          access_log off;
          return 200;
        }

        location / {
          proxy_set_header X-Real-IP $proxy_protocol_addr;
          proxy_set_header X-Forwarded-For $proxy_protocol_addr;
          proxy_set_header X-Forwarded-Proto https;
          proxy_set_header Host $http_host;
          proxy_set_header X-NginX-Proxy true;

          proxy_buffers 8 32k;
          proxy_buffer_size 64k;

          proxy_pass http://backend;
          proxy_redirect off;
        }

        location /assets {
          alias /var/app/current/public/assets;
          gzip_static on;
          gzip on;
          expires max;
          add_header Cache-Control public;
        }

        # enables WS support
        location /cable {
          proxy_pass http://backend;
          proxy_http_version 1.1;
          proxy_set_header Upgrade "websocket";
          proxy_set_header Connection "Upgrade";
          proxy_set_header X-Real-IP $proxy_protocol_addr;
          proxy_set_header X-Forwarded-For $proxy_protocol_addr;
          proxy_set_header X-Forwarded-Proto https;
        }

        # proxy sitemap requests to S3
        location /sitemap.xml.gz {
          proxy_set_header Host '<%= Rails.application.credentials[Rails.env.to_sym][:SITEMAP_S3_BUCKET] %>.s3.amazonaws.com';
          proxy_set_header Authorization '';
          proxy_hide_header x-amz-id-2;
          proxy_hide_header x-amz-request-id;
          proxy_hide_header Set-Cookie;
          proxy_ignore_headers "Set-Cookie";
          proxy_intercept_errors on;
          proxy_pass https://<%= Rails.application.credentials[Rails.env.to_sym][:SITEMAP_S3_BUCKET] %>.s3.amazonaws.com/sitemap.xml.gz;
          expires 1d;
          log_not_found off;
        }
      }
  /opt/custom_config/etc-nginx-conf.d-worker-timeout.conf:
    content: |
      # override_worker_timeout
      proxy_connect_timeout 600s;
      proxy_send_timeout    600s;
      proxy_read_timeout    600s;
      send_timeout          600s;


container_commands:
  01deploy_web_nginx_config:
    command: "erb /opt/custom_config/etc-nginx-conf.d-webapp_healthd.conf.erb > /etc/nginx/conf.d/webapp_healthd.conf"
    test: '[ "${ENVIRONMENT_TIER}" == "web" ]'
  02append_worker_timeout_nginx_config:
    command: "sed -i '/match the name of upstream directive which is defined above/ r /opt/custom_config/etc-nginx-conf.d-worker-timeout.conf' /etc/nginx/conf.d/webapp_healthd.conf"
    test: '[ "${ENVIRONMENT_TIER}" == "worker" ] && [[ ! $(grep override_worker_timeout /etc/nginx/conf.d/webapp_healthd.conf) ]]'
  03restart_nginx:
    command: "service nginx restart"
